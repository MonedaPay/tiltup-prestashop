name: Continuous Deployment - Prestashop
run-name: ${{ (github.head_ref =='' && 'manual') || github.head_ref}} -> ${{ (inputs.env-name =='' && 'dev') ||  inputs.env-name }}

on:
  pull_request:
    types: [ closed ]

  workflow_dispatch:
    inputs:
      env-name:
        description: 'environment name, one of: dev, staging, production'
        required: true
        default: dev
        type: environment

  workflow_call:
    inputs:
      env-name:
        description: 'environment name, one of: dev, staging, production'
        required: true
        type: string

jobs:
  prestashop-cd:
    name: 'Prestashop - deploy'
    runs-on: [ ubuntu-20.04 ]
    environment: ${{ (inputs.env-name == '' && 'dev') || inputs.env-name }}
    env:
      env-name: ${{ (inputs.env-name == '' && 'dev') || inputs.env-name }}
      app-name: tiltup-prestashop
      CERTIFICATE_ARN: ${{ vars.CERTIFICATE_ARN }}
      PERSISTENT_VOLUME_HANDLE: ${{ vars.PERSISTENT_VOLUME_HANDLE }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

      - name: Display SemVer
        shell: bash
        run: |
          echo "GitVer: $GITVERSION_MAJORMINORPATCH"

      - name: Create release artifact
        if: ${{ env.env-name == 'dev' }}
        shell: bash
        working-directory: .
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set +e
          
          ARCHIVE_FILE_NAME="tiltupcryptopaymentsmodule-v${GITVERSION_MAJORMINORPATCH}.zip"
          zip -r ${ARCHIVE_FILE_NAME} ./tiltupcryptopaymentsmodule
          gh release create "v${GITVERSION_MAJORMINORPATCH}" ./${ARCHIVE_FILE_NAME} --generate-notes
          
          set -e

      - id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Verify if this SHA image exists
        shell: bash
        run: |
          set +e
          aws ecr describe-images --repository-name=${{env.app-name}}-${{env.env-name}} --image-ids=imageTag="${GITVERSION_FULLSEMVER}"
          echo "IMAGE_EXISTS=$?" >> $GITHUB_ENV
          set -e

      - name: Create docker image
        shell: bash
        if: ${{ env.IMAGE_EXISTS != 0 }}
        env:
          NODE_ENV: ${{ env.env-name }}
          MERCHANT_ID: ${{ vars.MERCHANT_ID }}
          SHOP_ID: ${{ vars.SHOP_ID }}
          SUBDOMAIN: ${{ env.env-name == 'production' && 'app' || env.env-name }}
        run: |
          source ~/.bashrc
          envsubst < ./tiltupcryptopaymentsmodule/self_config.yml > ./tiltupcryptopaymentsmodule/self_config.yml.out && mv ./tiltupcryptopaymentsmodule/self_config.yml.out ./tiltupcryptopaymentsmodule/self_config.yml
          docker build --build-arg GIT_SHA=${GITHUB_SHA} . -t ${{env.app-name}}-${{env.env-name}}
          docker tag ${{env.app-name}}-${{env.env-name}} "${{ secrets.ECR_HOST }}/${{env.app-name}}-${{env.env-name}}:${GITVERSION_FULLSEMVER}"
          docker push "${{ secrets.ECR_HOST }}/${{env.app-name}}-${{env.env-name}}:${GITVERSION_FULLSEMVER}"

      - name: Deploy on ${{env.env-name}} EKS Cluster
        shell: bash
        env:
          app-name: ${{ env.app-name }}
          env-name: ${{ env.env-name }}
          NODE_ENV: ${{ env.env-name }}
          ECR_HOST: ${{ secrets.ECR_HOST }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SUBDOMAIN: ${{ env.env-name == 'production' && 'app' || env.env-name }}
        working-directory: ./kube
        run: |
          aws eks update-kubeconfig --region ${{vars.AWS_REGION }} --name ${{env.env-name}}
          aws sts get-caller-identity
          for f in *;
          do
            envsubst < $f | kubectl apply -n ${{env.env-name}} -f -
          done
          
          kubectl rollout status deployment ${{env.app-name}} -n ${{env.env-name}} --timeout=180s